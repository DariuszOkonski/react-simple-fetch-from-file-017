{"version":3,"sources":["components/Header.js","components/ButtonsControler.js","components/SingleResult.js","components/DisplayResults.js","components/App.js","index.js"],"names":["Header","props","react_default","a","createElement","downloadingTime","toFixed","ButtonsController","onClick","handleFetchClick","handleResetClick","SingleResult","element","id","en","pl","DisplayResults","display","isFetched","data","map","el","components_SingleResult","key","App","randomTime","intervalIndex","dataToSend","state","_this","handleFetch","alert","loadData","handleReset","setState","countDownloadingTime","setInterval","prevState","clearInterval","this","updateDateToSend","Object","toConsumableArray","index","Math","floor","random","length","_this2","fetch","then","response","status","Error","json","res","setTimeout","catch","err","console","log","fetchData","className","components_Header","ButtonsControler","components_DisplayResults","Component","ReactDOM","render","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.a42c66d7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div>\r\n      <h2>Fetch from file app</h2>\r\n      {props.downloadingTime > 0 ?\r\n        <h4>Downloading data time: <span>{(props.downloadingTime / 1000).toFixed(1)}</span>s</h4> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst ButtonsController = (props) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={props.handleFetchClick}\r\n      >fetch from file</button>\r\n\r\n      <button\r\n        onClick={props.handleResetClick}\r\n      >reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ButtonsController;","import React from 'react';\r\n\r\nconst SingleResult = (props) => {\r\n  return (\r\n    <li>\r\n      <h4>id: {props.element.id}</h4>\r\n      <p>English: {props.element.en}</p>\r\n      <p>Polish: {props.element.pl}</p>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default SingleResult;","import React from 'react';\r\nimport SingleResult from './SingleResult';\r\n\r\nconst DisplayResults = (props) => {\r\n\r\n  let display = null;\r\n\r\n  if (props.isFetched && props.data !== null) {\r\n    display = props.data.map(el => <SingleResult key={el.id} element={el} />)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {display}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayResults;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport ButtonsController from './ButtonsControler';\nimport DisplayResults from './DisplayResults';\n\nclass App extends Component {\n  randomTime = 0;\n  intervalIndex = null;\n  dataToSend = null;\n\n  state = {\n    downloadingTime: this.randomTime,\n    isFetched: false,\n    data: [],\n  }\n\n  handleFetch = () => {\n    if (!this.state.isFetched) {\n      this.loadData();\n    } else {\n      return alert('First Reset data');\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      isFetched: false,\n      data: [],\n    })\n    this.dataToSend = null;\n  }\n\n  componentDidUpdate() {\n    if (this.state.isFetched && this.dataToSend === null) {\n      this.updateDateToSend();\n    }\n  }\n\n  updateDateToSend() {\n    this.dataToSend = [...this.state.data];\n    const index = Math.floor(Math.random() * this.dataToSend.length);\n    this.dataToSend = this.dataToSend[index];\n\n    this.setState({\n      data: [...this.dataToSend]\n    })\n  }\n\n  countDownloadingTime = () => {\n    this.intervalIndex = setInterval(() => {\n      if (this.state.downloadingTime > 0) {\n        this.setState(prevState => ({\n          downloadingTime: prevState.downloadingTime - 100\n        }))\n      } else {\n        clearInterval(this.intervalIndex);\n        this.setState({\n          downloadingTime: 0\n        })\n      }\n    }, 100);\n  }\n\n  fetchData() {\n    fetch('data/data.json')\n      .then(response => {\n        if (response.status === 200) {\n          return response;\n        }\n        throw new Error('Something went wrong');\n      })\n      .then(data => data.json())\n      .then(res => {\n        setTimeout(() => {\n          this.setState({\n            data: res,\n            isFetched: true,\n          })\n        }, this.randomTime);\n      })\n      .catch(err => console.log(err));\n  }\n\n  loadData() {\n    //generate random time\n    this.randomTime = Math.floor((Math.random() * 3000) + 2000);\n\n    this.setState({\n      downloadingTime: this.randomTime\n    })\n\n    this.countDownloadingTime();\n\n    this.fetchData();\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          downloadingTime={this.state.downloadingTime}\n        />\n\n        <ButtonsController\n          handleFetchClick={this.handleFetch}\n          handleResetClick={this.handleReset}\n        />\n\n        <DisplayResults\n          data={this.state.data}\n          isFetched={this.state.isFetched}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}